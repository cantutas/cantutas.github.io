<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cantutas</title>
  
  <subtitle>(*˘︶˘*).。.:*♡</subtitle>
  <link href="https://cantutas.online/atom.xml" rel="self"/>
  
  <link href="https://cantutas.online/"/>
  <updated>2025-03-23T05:02:58.327Z</updated>
  <id>https://cantutas.online/</id>
  
  <author>
    <name>cantutas</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YOLO11改进--增强对小目标的检测能力</title>
    <link href="https://cantutas.online/2024/11/23/yolo11-improved/"/>
    <id>https://cantutas.online/2024/11/23/yolo11-improved/</id>
    <published>2024-11-23T02:24:02.000Z</published>
    <updated>2025-03-23T05:02:58.327Z</updated>
    
    <content type="html"><![CDATA[<p>在目标检测领域，YOLO系列算法以其高效性和准确性备受关注。然而，对于小目标检测，YOLO算法仍存在一定的局限性。小目标在图像中占比小、特征不明显，容易被忽略或误判。本文将介绍如何通过增加小目标检测头和添加CBAM注意力机制来改进YOLOv11，提升其对小目标的检测能力。</p><h2 id="添加小目标检测头"><a href="#添加小目标检测头" class="headerlink" title="添加小目标检测头"></a>添加小目标检测头</h2><p>原始的YOLO11输出层只有P5、P4、P3三层。对输入的 640 × 640 的图像进行了三次下采样，最终输出的三个特征图的大小依次为 80 × 80(P3)、40 × 40(P4) 和 20 × 20(P5)。特征图的大小与输入图像各网格单元对应区域大小成反比关系，所以从 P3 到 P5，对小目标的检测能力依次下降。为了解决由于多层卷积导致的特征信息淹没问题，可以在原有网络的基础上增加新的检测头P2。</p><p>首先找到ultralytics-main&#x2F;ultralytics&#x2F;cfg&#x2F;models&#x2F;11目录下的yolo11.yaml文件，复制一份并改个名字，例如yolo11-improved.yaml。在该yaml文件文件中，删除原有内容，并复制以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ultralytics YOLO 🚀, AGPL-3.0 license</span></span><br><span class="line"><span class="comment"># YOLO11 object detection model with P2-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">80</span> <span class="comment"># number of classes</span></span><br><span class="line"><span class="attr">scales:</span> <span class="comment"># model compound scaling constants, i.e. &#x27;model=yolo11n.yaml&#x27; will call yolo11.yaml with scale &#x27;n&#x27;</span></span><br><span class="line">  <span class="comment"># [depth, width, max_channels]</span></span><br><span class="line">  <span class="attr">n:</span> [<span class="number">0.50</span>, <span class="number">0.25</span>, <span class="number">1024</span>]</span><br><span class="line">  <span class="attr">s:</span> [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">1024</span>]</span><br><span class="line">  <span class="attr">m:</span> [<span class="number">0.50</span>, <span class="number">1.00</span>, <span class="number">512</span>]</span><br><span class="line">  <span class="attr">l:</span> [<span class="number">1.00</span>, <span class="number">1.00</span>, <span class="number">512</span>]</span><br><span class="line">  <span class="attr">x:</span> [<span class="number">1.00</span>, <span class="number">1.50</span>, <span class="number">512</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLO11-P2 backbone</span></span><br><span class="line"><span class="attr">backbone:</span></span><br><span class="line">  <span class="comment"># [from, repeats, module, args]</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">64</span>, <span class="number">3</span>, <span class="number">2</span>]] <span class="comment"># 0-P1/2</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]] <span class="comment"># 1-P2/4</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">256</span>, <span class="literal">False</span>, <span class="number">0.25</span>]]</span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]] <span class="comment"># 3-P3/8</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">False</span>, <span class="number">0.25</span>]]</span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]] <span class="comment"># 5-P4/16</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">True</span>]]</span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>]] <span class="comment"># 7-P5/32</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">1024</span>, <span class="literal">True</span>]]</span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">SPPF</span>, [<span class="number">1024</span>, <span class="number">5</span>]] <span class="comment"># 9</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C2PSA</span>, [<span class="number">1024</span>]] <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLO11-P2 head</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P4</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">False</span>]] <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P3</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">256</span>, <span class="literal">False</span>]] <span class="comment"># 16 (P3/8-small)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">2</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P2</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">128</span>, <span class="literal">False</span>]] <span class="comment"># 19 (P2/4-xsmall)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">16</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P3</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">256</span>, <span class="literal">False</span>]] <span class="comment"># 22 (P3/8-small)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">13</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P4</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">False</span>]] <span class="comment"># 25 (P4/16-medium)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P5</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">1024</span>, <span class="literal">True</span>]] <span class="comment"># 28 (P5/32-large)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">28</span>], <span class="number">1</span>, <span class="string">Detect</span>, [<span class="string">nc</span>]] <span class="comment"># Detect(P2, P3, P4, P5)</span></span><br></pre></td></tr></table></figure><h2 id="添加CBAM模块"><a href="#添加CBAM模块" class="headerlink" title="添加CBAM模块"></a>添加CBAM模块</h2><h3 id="添加CBAM代码"><a href="#添加CBAM代码" class="headerlink" title="添加CBAM代码"></a>添加CBAM代码</h3><p>在ultralytics&#x2F;nn&#x2F;modules目录下新建文件CBAM.py，复制粘贴以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChannelAttention</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channels: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.avg = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">max</span> = nn.AdaptiveMaxPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Conv2d(channels, channels//<span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Conv2d(channels//<span class="number">16</span>, channels, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.relu=nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x: torch.Tensor</span>) -&gt; torch.Tensor:</span><br><span class="line">        avg_out=<span class="variable language_">self</span>.fc2(<span class="variable language_">self</span>.relu(<span class="variable language_">self</span>.fc1(<span class="variable language_">self</span>.avg(x))))</span><br><span class="line">        max_out=<span class="variable language_">self</span>.fc2(<span class="variable language_">self</span>.relu(<span class="variable language_">self</span>.fc1(<span class="variable language_">self</span>.<span class="built_in">max</span>(x))))</span><br><span class="line"></span><br><span class="line">        out=avg_out+max_out</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.sigmoid(out)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpatialAttention</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kernel_size=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">assert</span> kernel_size <span class="keyword">in</span> &#123;<span class="number">3</span>, <span class="number">7</span>&#125;, <span class="string">&quot;kernel size must be 3 or 7&quot;</span></span><br><span class="line">        padding = <span class="number">3</span> <span class="keyword">if</span> kernel_size == <span class="number">7</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">2</span>, <span class="number">1</span>, kernel_size, padding=padding, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        avg_out = torch.mean(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        max_out, _ = torch.<span class="built_in">max</span>(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        x = torch.cat([avg_out, max_out], dim=<span class="number">1</span>)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.sigmoid(x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myCBAM</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c1, kernel_size=<span class="number">7</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize CBAM with given input channel (c1) and kernel size.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.ca = ChannelAttention(c1)</span><br><span class="line">        <span class="variable language_">self</span>.sa = SpatialAttention(kernel_size)</span><br><span class="line">        <span class="variable language_">self</span>.relu= nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out=<span class="variable language_">self</span>.ca(x)*x</span><br><span class="line">        out=<span class="variable language_">self</span>.sa(out)*out</span><br><span class="line">        out=<span class="variable language_">self</span>.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h3 id="修改task-py文件"><a href="#修改task-py文件" class="headerlink" title="修改task.py文件"></a>修改task.py文件</h3><p>在&#x2F;ultralytics&#x2F;nn目录下找到task.py文件。先导入刚刚创建的CBAM.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics.nn.modules.CBAM <span class="keyword">import</span> myCBAM <span class="comment">#导入CBAM模块</span></span><br></pre></td></tr></table></figure><p>然后找到parse_model模块在该模块中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> m <span class="keyword">in</span> &#123;myCBAM&#125;:</span><br><span class="line">    args=[ch[f],*args]</span><br></pre></td></tr></table></figure><h3 id="修改yaml文件"><a href="#修改yaml文件" class="headerlink" title="修改yaml文件"></a>修改yaml文件</h3><p>回到刚刚创建的yolo11-improved.yaml文件，在head模块中，只需在想使用CBAM的位置添加即可，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLO11-P2 head</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P4</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">False</span>]] <span class="comment"># 13</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">myCBAM</span>, []] </span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P3</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">256</span>, <span class="literal">False</span>]] <span class="comment"># 16 (P3/8-small)</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">myCBAM</span>, []] </span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&quot;nearest&quot;</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">2</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat backbone P2</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">128</span>, <span class="literal">False</span>]] <span class="comment"># 19 (P2/4-xsmall)</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">myCBAM</span>, []] </span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">16</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P3</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">256</span>, <span class="literal">False</span>]] <span class="comment"># 22 (P3/8-small)</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">myCBAM</span>, []] </span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">13</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P4</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">512</span>, <span class="literal">False</span>]] <span class="comment"># 25 (P4/16-medium)</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">myCBAM</span>, []] </span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]] <span class="comment"># cat head P5</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3k2</span>, [<span class="number">1024</span>, <span class="literal">True</span>]] <span class="comment"># 28 (P5/32-large)</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> [[<span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">28</span>], <span class="number">1</span>, <span class="string">Detect</span>, [<span class="string">nc</span>]] <span class="comment"># Detect(P2, P3, P4, P5)</span></span><br></pre></td></tr></table></figure><p>这里，我在特征融合部分共插入了5个 CBAM 模块，分别位于每<br>一个 C3k2 模块之后。</p><h2 id="改进结果"><a href="#改进结果" class="headerlink" title="改进结果"></a>改进结果</h2><h3 id="原始YOLO11检测结果"><a href="#原始YOLO11检测结果" class="headerlink" title="原始YOLO11检测结果"></a>原始YOLO11检测结果</h3><p><img src="https://github.com/cantutas/drone-detection-based-on-yolo11/blob/master/img/kalvin_tool_20250103193341.gif"></p><h3 id="改进后的YOLO11检测结果"><a href="#改进后的YOLO11检测结果" class="headerlink" title="改进后的YOLO11检测结果"></a>改进后的YOLO11检测结果</h3><p><img src="https://github.com/cantutas/drone-detection-based-on-yolo11/blob/master/img/kalvin_tool_20250103193341.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在目标检测领域，YOLO系列算法以其高效性和准确性备受关注。然而，对于小目标检测，YOLO算法仍存在一定的局限性。小目标在图像中占比小、特征不明显，容易被忽略或误判。本文将介绍如何通过增加小目标检测头和添加CBAM注意力机制来改进YOLOv11，提升其对小目标的检测能力。&lt;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://cantutas.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolo" scheme="https://cantutas.online/tags/yolo/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读--Per-Pixel Classification is Not All You Need for Semantic Segment</title>
    <link href="https://cantutas.online/2024/11/15/ai-introduction/"/>
    <id>https://cantutas.online/2024/11/15/ai-introduction/</id>
    <published>2024-11-15T05:37:54.000Z</published>
    <updated>2025-03-23T09:50:15.674Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://arxiv.org/abs/2107.06278">Per-Pixel Classification is Not All You Need for Semantic Segment</a><br>代码：<a href="https://github.com/facebookresearch/MaskFormer">MaskFormer</a></p><h2 id="问题定义和动机"><a href="#问题定义和动机" class="headerlink" title="问题定义和动机"></a>问题定义和动机</h2><p>自 FCN 诞生以来，语义分割任务就被默认当作逐像素分类的任务来解决。诚然，这种方法简化了语义分割任务，但是它仍然存在很多问题，其中最大的问题就是这种方法只能输出固定个数的分割掩码，所以逐像素分类很难解决实例分割这样的更难的任务。但是反观实例分割，这种任务一直以来都是用以 Mask R-CNN 为代表的掩码分类的方法来解决的。掩码分类和逐像素分类的区别就在于掩码分类会预测一组二值掩码，将每一个掩码与单个类别关联，而不是每个像素都需要类别。因此，在这篇论文里，作者提出了以下两个问题：</p><ol><li>能否找到一个简洁通用的 mask classification 模型同时解决语义分割和实例分割问题？</li><li>这个 mask classification 模型在语义分割上的结果能否超越传统的像素分类模型</li></ol><h2 id="论文方法"><a href="#论文方法" class="headerlink" title="论文方法"></a>论文方法</h2><h3 id="MaskFormer结构"><a href="#MaskFormer结构" class="headerlink" title="MaskFormer结构"></a>MaskFormer结构</h3><p>MaskFormer的基本思想是把语义分割、实例分割、甚至全景分割都用一个统一的框架、损失和训练过程来实现。MaskFormer与 DETR 思想类似，都是去除 NMS&#x2F;anchor 等人工先验，把实例分割作为一个集合预测问题来看待，具体的网络结构如图 1 所示，整体包含了三个模块。像素级模块的作用是生成像素级特征嵌入，它先用 backbone 提取图像特征得到低分辨率的特征图，然后通过 pixel decoder 模块进行逐步上采样生成和原图宽高一致的像素级特征嵌入 $\varepsilon_{pixel}$ 。Transformer 模块主要包含了一个标准的 Transformer 解码器，解码器的输入有两部分，一部分是来自像素级模块的特征图，另一部分是 N 个可学习的位置嵌入 (N queries)，这里其实是受 DETR 的启发，用 object query 去进行后续的掩码预测和类别预测。在分割模块中，Transformer 模块的输出 Q 会经过一个线性层并用 softmax 函数激活得到类别的概率预测，这里图中的 +1 指的是不包含任何类别的部分。掩码预测是通过将 Q 经过 MLP 后与 $\varepsilon_{pixel}$ 点乘并用 sigmoid 函数激活得到的。</p><p><img src="https://gitee.com/cantatu/image/blob/9e2093f2d2e6e6f0330cec68fffdc64867076a8f/images/maskformer.png" alt="MaskFormer结构"></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>本文中作者借鉴了 DETR 中 bipartite matching loss 的设计思想来训练模型，所用的损失函数为：</p><p>$$<br>\mathcal{L}_{\text{mask-cls}}(z, z^{\text{gt}}) &#x3D; \sum_{j&#x3D;1}^{N} \left[ -\log p_{\sigma(j)}(c_{j}^{\text{gt}}) + \Bbb{1}_{c_{j}^{\text{gt}} \neq \varnothing} \mathcal{L}_{\text{mask}}(m_{\sigma(j)}, m_{j}^{\text{gt}}) \right]<br>$$</p><p>其中 $-\log p_{\sigma(j)}(c_{j}^{\text{gt}})$ 是分类损失,   $\Bbb{1}_{c_{j}^{\text{gt}}\ne \varnothing}\mathcal{L}_{\text{mask}}(m_{\sigma(j)},m_{j}^{\text{gt}})$ 是掩码损失，$\mathcal{L}_{\text{mask}}$ 是二进制掩码损失。大多数现有的掩码分类模型还使用辅助损失，然而本论文提出的简单的掩码分类模型，允许单独使用掩码分类损失 $\mathcal{L}_{\text{mask-cls}}$ 进行端到端训练。</p><h3 id="推理过程"><a href="#推理过程" class="headerlink" title="推理过程"></a>推理过程</h3><p>论文中提出了两种推理过程，一种是通用的推理过程，另一种是专门用于语义分割的推理过程。作者认为推理策略的选择在很大程度上取决于评估指标，而不是任务本身。</p><ol><li><p><strong>通用推理</strong>：<br>通过将每个像素点 $[h, w]$ 分配给 $N$ 个预测的概率-掩码对中的一个来将图像划分为段。直观上，只有当最可能的类别概率和掩码预测概率都很高时，才会将位置 $[h, w]$ 的像素分配给相应的概率-掩码对 $i$。因此分配公式为 $\arg\max_{i:c_i \neq \varnothing} p_i(c_i) \cdot m_i[h, w]$ ，其中 $c_i$ 是最可能的类别标签。被分配到相同概率-掩码对 i 的像素形成一个段，其中每个像素都被标记为 $c_i$。对于语义分割，类别标签相同的段会被合并；而对于实例级分割任务，使用概率-掩码对的索引 $i$ 区分同一类别的不同实例。最后，为了降低全景分割中的误报，作者在推理前过滤掉了低置信度的预测，并移除了那些预测掩码（$m_i &gt; 0.5$）的大部分被其他预测遮挡的预测段。</p></li><li><p><strong>语义推理</strong>：<br>语义推理通过一个简单的矩阵乘法来实现。作者通过实验发现，对概率-掩码对进行边缘化，即 $\arg\max_{c&#x3D;1,\ldots,K} \sum_{i&#x3D;1}^{N} p_i(c) \cdot m_i[h, w]$ ，比通用推理中使用的策略得到的结果更好。$\arg\max$ 不包括“无对象”类别（$\varnothing$），因为标准的语义分割要求每个输出像素都要有一个标签。</p></li></ol><h2 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h2><p>本文中作者提出了基于掩码分类的语义分割模型 MaskFormer，并通过实验证明了掩码分类足够通用，甚至可以使用完全相同的模型、损失和训练过程，以统一的方式解决语义级和实例级分割任务，<strong>为语义分割任务提供了新的解决思路</strong>。<br>论文中 MaskFormer 在语义分割中表现出色，在多个语义分割数据集上，都优于逐像素分类的方法。尤其是在数据集包含的类别数量较多的情况下，MaskFormer 的表现更好。在全景分割任务中它也表现优异，优于复杂的 DETR 模型和 Max-DeepLab 模型，并且无需复杂的辅助损失，简化了模型设计。本论文通过实验验证了掩码分类相对于逐像素分类在分割任务中的优势，为后续研究提供了新的思路和方向。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接：&lt;a href=&quot;https://arxiv.org/abs/2107.06278&quot;&gt;Per-Pixel Classification is Not All You Need for Semantic Segment&lt;/a&gt;&lt;br&gt;代码：&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="深度学习" scheme="https://cantutas.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://cantutas.online/2024/10/05/linux-command/"/>
    <id>https://cantutas.online/2024/10/05/linux-command/</id>
    <published>2024-10-05T06:33:12.000Z</published>
    <updated>2025-03-23T09:49:39.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><ul><li>展示当前工作目录（默认home目录）下的内容</li><li>home目录：每个用户在Linux系统中的专属目录，默认在&#x2F;home&#x2F;用户名</li><li>当前工作目录：执行命令式需要一个工作目录，默认是home目录<ul><li>选项：<ul><li>-a：列出所有文件包括隐藏文件</li><li>-l：以列表（竖向排列）形式展示内容，且信息比-a多</li><li>-h：以易于阅读的形式。列出文件大小，如K,M,G。需要和-h搭配使用</li><li>选项可以组合使用，如ls -lah等同于ls -a -l -h</li></ul></li><li>参数：指定要查看的文件夹内容，如果不给，默认查看当前工作目录</li></ul></li></ul><h2 id="cd切换工作目录"><a href="#cd切换工作目录" class="headerlink" title="cd切换工作目录"></a>cd切换工作目录</h2><ul><li>cd命令不用选项，只有参数，表示要切换到哪个目录</li><li>不给参数，则切换到home</li></ul><h2 id="pwd查看当前工作目录"><a href="#pwd查看当前工作目录" class="headerlink" title="pwd查看当前工作目录"></a>pwd查看当前工作目录</h2><ul><li>无选项，无参数，直接输入pwd</li></ul><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><ul><li>绝对路径：以根目录为起点，描述路径的一种方法，以&#x2F;开头</li><li>相对路径：以当前目录为起点</li><li>.表示当前目录</li><li>..表示上一级目录</li><li>~表示home目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><ul><li>用于创建新的目录</li><li>选项：-p，可选，表示自动创建不存在的父目录，可以一次性创建多个层级的目录</li><li>参数：必填，表示Linux路径，即要创建的文件夹的路径（相对路径或绝对路径）</li></ul><h2 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h2><ul><li>语法：touch Linux路径</li></ul><h2 id="cat查看文件内容"><a href="#cat查看文件内容" class="headerlink" title="cat查看文件内容"></a>cat查看文件内容</h2><ul><li>语法：cat Linux路径</li></ul><h2 id="more查看文件内容"><a href="#more查看文件内容" class="headerlink" title="more查看文件内容"></a>more查看文件内容</h2><ul><li>语法：more Linux路径</li><li>查看过程中，通过空格翻页，通过q退出查看</li><li>注：cat是直接将内容全部显示出来；more支持翻页，内容过多时可以一页页的展示</li></ul><h2 id="cp复制文件文件夹"><a href="#cp复制文件文件夹" class="headerlink" title="cp复制文件文件夹"></a>cp复制文件文件夹</h2><ul><li>语法：cp 【-r】参数1 参数2</li><li>选项：-r可选，用于复制文件夹使用，表示递归</li><li>参数1：被复制文件或文件夹的路径</li><li>参数2：要复制去的路径</li></ul><h2 id="mv移动文件或文件夹"><a href="#mv移动文件或文件夹" class="headerlink" title="mv移动文件或文件夹"></a>mv移动文件或文件夹</h2><ul><li>语法：mv 参数1 参数2</li><li>参数1：被移动的文件或文件夹的路径</li><li>参数2：要移动去的路径，如果路径不存在，则会将原文件改名</li></ul><h2 id="rm删除文件、文件夹"><a href="#rm删除文件、文件夹" class="headerlink" title="rm删除文件、文件夹"></a>rm删除文件、文件夹</h2><ul><li>语法：rm 【-r -f】 参数1 ……. 参数n</li><li>-r：用于删除文件夹</li><li>-f：强制删除。（不会弹出确认信息）</li><li>普通用户不会弹出提示，root用户会</li><li>参数：表示要删除的文件或文件夹的路径</li><li>rm支持通配符<em>用来模糊匹配，</em>表示匹配任意内容</li></ul><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><ul><li>查看所使用的一系列命令的程序文件存放在哪里</li><li>语法：which 要查找的命令</li></ul><h2 id="find按文件名或大小查找文件"><a href="#find按文件名或大小查找文件" class="headerlink" title="find按文件名或大小查找文件"></a>find按文件名或大小查找文件</h2><ul><li>语法：find 起始路径 -name 文件名</li><li>find支持通配符<em>用来模糊匹配，</em>表示匹配任意内容</li><li>语法：find 起始路径 -size +或-数字[KMG]<ul><li>+表示大于，-表示小于</li><li>KMG表示单位</li></ul></li><li>例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find - size -10K</span><br></pre></td></tr></table></figure></li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><ul><li>从文件中通过关键字过滤文件行</li><li>语法：grep 【-n】关键字 文件路径</li><li>选项：-n，可选，表示在结果中显示匹配的行的行号</li><li>关键字：必填，表示过滤的关键字，带有空格或其他特殊符号的用双引号包围</li><li>文件路径：必填，表示要过来的内容的文件路径，可作为内容输入端口</li></ul><h2 id="wc数量统计"><a href="#wc数量统计" class="headerlink" title="wc数量统计"></a>wc数量统计</h2><ul><li>统计文件的行数、单词数量等</li><li>语法：wc 【-c -m -l -w】文件路径</li><li>选项：<ul><li>-c统计字节数量</li><li>-m统计字符数量</li><li>-l统计行数</li><li>-w统计单词数量</li></ul></li><li>文件路径：被统计的文件路径，可作为管道符的输入</li></ul><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><ul><li>将管道符左边命令的结果作为右边命令的输入</li></ul><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><ul><li>在命令行输出指定内容</li><li>语法：echo 输出的内容</li><li>复杂内容可用双引号包围</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号&#96;"></a>反引号&#96;</h2><ul><li>被反引号&#96;&#96;包围的内容会被作为命令执行，而非普通字符串</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><ul><li>&gt;：将左侧命令的结果，覆盖写入符号右侧指定文件中</li><li>&gt;&gt;：将左侧命令的结果，追加写入到符号右侧指定文件中</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><ul><li>可以查看文件尾部内容，跟踪文件的最新更改</li><li>语法：tail 【-f -num】Linux路径</li><li>选项：<ul><li>-f：表示持续跟踪</li><li>-num：表示尾部多少行，num是要填写的具体数字，不填默认10行</li></ul></li><li>Ctrl+c快捷键可停止该命令的运行</li></ul><h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><ul><li>语法：tar [-c -v -x -z -C] 参数1 参数2 … 参数n<ul><li>-c,创建压缩文件庸用于压缩模式</li><li>-v 显示压缩、解压过程，用于查看进度</li><li>-x 解压模式</li><li>-f,要创建的文件，或要解压的文件，-f选顶必须在所有选顶中位置处于最后一个</li><li>-z gzip格式。不使用-z则是普通的tarball格式</li><li>-C 选择解压的目的地</li></ul></li><li>-z一般放第一个</li><li>-C一般单独使用和其他参数分开</li><li>常用压缩组合：-cvf 和-zcvf</li><li>常用解压组合：-xvf、-xvf 文件 -C 解压路径  、-zxvf 文件 -C 解压路径</li></ul><h3 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h3><ul><li>压缩文件为zip压缩包</li><li>语法： zip [-r] 参数1 参数2 … 参数n<ul><li>-r 被压缩的包含文件夹的时候需要使用-r选项，和rm、cp等命令的-r效果一样</li></ul></li></ul><h3 id="unzip命令"><a href="#unzip命令" class="headerlink" title="unzip命令"></a>unzip命令</h3><ul><li>语法：unzip [-d] 参数</li><li>-d,指定要解压去的位置,同tar的-C选项</li><li>参数，被解压的zip压缩包文件</li></ul><h2 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h2><h3 id="root用户（超级管理员）"><a href="#root用户（超级管理员）" class="headerlink" title="root用户（超级管理员）"></a>root用户（超级管理员）</h3><ul><li>root用户拥有最大的系统操作权限</li><li>普通用户在其home目录内不受限</li></ul><h3 id="su和exit命令"><a href="#su和exit命令" class="headerlink" title="su和exit命令"></a>su和exit命令</h3><ul><li>语法：su 【-】【用户名】</li><li>选项：-表示是否在切换用户后加载环境变量</li><li>用户名可省略，表示切换到root</li><li>exit命令用于退回上一个用户，也可以用Ctrl+d</li></ul><h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><ul><li>可以让普通用户带有root权限</li><li>语法：sudo 其他命令</li><li>需要root用户执行visudo命令，增加配置才能让普通永不有sudo命令的执行权限</li></ul><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><ul><li>以下命令需要root用户执行<ul><li>创建用户组：groupadd 用户组名</li><li>删除用户组：groupdel 用户组名</li></ul></li></ul><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li>以下命令需要root用户执行<ul><li>创建用户：useradd 【-g -d】用户名<ul><li>-g：指定用户组，不指定-g，会创建同名组并自动加入，指定的组需要已经存在，如果已经存在同名组，必须使用-g</li><li>-d：指定用户home路径，默认在&#x2F;home&#x2F;用户名</li></ul></li><li>删除用户：userdel 【-r】用户名<ul><li>-r：删除用户的home目录，不使用-r，删除用户时，home目录保留</li></ul></li><li>查看用户所在组：id 【用户名】<ul><li>不提供用户名则查看自身</li></ul></li><li>修改用户名所在组：usermod -aG 用户组 用户名</li><li>查看用户和用户组：getent passwd<ul><li>查询结果包含七个信息，分别是：用户名、密码（x）、用户id、组id、描述信息、home目录、执行终端（默认bash）</li></ul></li><li>查看用户组：getent group<ul><li>查询结果包含三个信息：组名称、组认证（显示为X）、组id</li></ul></li></ul></li></ul><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h3><p>主要在centOs中使用</p><ul><li>yum：RPM包（Linux的安装包格式）软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</li><li>yum需要root权限和联网</li><li>语法：yum 【-y】 【install | remove | search】软件名称<ul><li>-y：自动确认</li><li>install安装</li><li>remove卸载</li><li>search搜索</li></ul></li></ul><h3 id="apt命令"><a href="#apt命令" class="headerlink" title="apt命令"></a>apt命令</h3><p>主要在Ubuntu中使用</p><ul><li>语法：apt 【-y】【install | remove | search】软件名称</li><li>其他同yum</li></ul><h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><ul><li>Linu×系统很多软件均支持使用systemctl命令控制：启动、停止、开机自启</li><li>语法：systemctlstart|stop丨status|enable丨disable服务名</li><li>系统内置的服务比较多&#x2F;比如：<ul><li>NetworkManager,主网络服务</li><li>network,副网络服务</li><li>firewalld,防火墙服务</li><li>sshd,ssh服务（FinalShell远程登录Linux使用的就是这个服务）</li><li>start启动</li><li>stoP关闭</li><li>status查看状态</li><li>enable开启开机自启</li><li>disable关闭开机自启</li></ul></li></ul><h3 id="ln创建软链接"><a href="#ln创建软链接" class="headerlink" title="ln创建软链接"></a>ln创建软链接</h3><ul><li>类似Windows的快捷方式，可以将文件、文件夹链接到其他位置<br>语法：ln -s 参数1 参数2</li><li>-s：创建软链接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：要链接去的目的地</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="Ctrl-c强制停止"><a href="#Ctrl-c强制停止" class="headerlink" title="Ctrl+c强制停止"></a>Ctrl+c强制停止</h3><ul><li>命令输入错误也可以用这个退出当前命令的输入</li></ul><h3 id="Ctrl-d退出或登出"><a href="#Ctrl-d退出或登出" class="headerlink" title="Ctrl+d退出或登出"></a>Ctrl+d退出或登出</h3><ul><li>退出账户登录，或者退出某些特定程序的专属页面</li><li>不能用于退出vi或vim</li></ul><h3 id="history历史命令搜索"><a href="#history历史命令搜索" class="headerlink" title="history历史命令搜索"></a>history历史命令搜索</h3><ul><li>查看历史输入的命令</li><li>可以通过Ctrl+r，输入内容去匹配历史命令，如果搜到的内容是需要的，可以回车键直接执行，或者键盘左右键得到此命令（不执行）</li></ul><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><ul><li>ctrl*a,跳到命令开头</li><li>ctrl+跳到命令结尾</li><li>ctrl+键盘左键，向左跳一个单词</li><li>ctrl+键盘右键，向右跳一个单词</li></ul><h3 id="Ctrl-l清屏"><a href="#Ctrl-l清屏" class="headerlink" title="Ctrl+l清屏"></a>Ctrl+l清屏</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ls命令&quot;&gt;&lt;a href=&quot;#ls命令&quot; class=&quot;headerlink&quot; title=&quot;ls命令&quot;&gt;&lt;/a&gt;ls命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;展示当前工作目录（默认home目录）下的内容&lt;/li&gt;
&lt;li&gt;home目录：每个用户在Linux系统中的专属目</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://cantutas.online/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="https://cantutas.online/2024/08/02/SpringBoot/"/>
    <id>https://cantutas.online/2024/08/02/SpringBoot/</id>
    <published>2024-08-02T07:59:26.000Z</published>
    <updated>2025-03-23T09:47:31.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>Spring Boot 是一个基于 Spring 框架的开源 Java 开发框架，旨在简化 Spring 应用程序的初始搭建和开发过程。它通过提供默认配置和约定俗成的设置，大大减少了开发人员在项目配置和依赖管理上花费的时间，使开发人员能够更专注于业务逻辑的实现。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>快速入门：<ul><li>Spring Boot 提供了 Starter POMs，简化了 Maven 和 Gradle 项目的依赖管理。</li><li>开发人员无需手动配置大量的 XML 文件或 Java 配置类，只需添加 Starter 依赖即可。</li></ul></li><li>自动配置：<ul><li>Spring Boot 的核心功能之一是自动配置（Auto-configuration）。它会根据项目中添加的依赖自动配置 Spring 应用程序。</li></ul></li><li>嵌入式服务器：<br>  Spring Boot 内置了 Tomcat、Jetty 或 Undertow 等嵌入式 HTTP 服务器，无需单独部署 WAR 文件到外部服务器。</li><li>生产就绪：<ul><li>Spring Boot 提供了生产环境所需的功能，如性能指标、健康检查、外部化配置等。</li><li>通过 Actuator 模块，可以轻松监控和管理应用程序。</li></ul></li><li>支持多种部署方式：<ul><li>Spring Boot 应用程序可以打包成可执行的 JAR 文件，直接运行在命令行中。</li><li>也支持传统的 WAR 文件部署到外部 Servlet 容器</li></ul></li></ul><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>SpringBoot支持多种格式的配置方式</p><ul><li>命令行参数：通过命令行传递的参数。例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar myapp.jar --server.port=8086</span><br></pre></td></tr></table></figure></li><li>java系统属性：通过 System.getProperties() 设置的系统属性。例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8083 -jar myapp.jar</span><br></pre></td></tr></table></figure></li><li>application.properties文件：<br>例如<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure></li><li>优先级：<br>不同配置方式的优先级为：命令行参数&gt;java系统属性&gt;properties&gt;yml&gt;yaml</li></ul><h2 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h2><p>Bean 是由 Spring 容器管理的对象。它是 Spring 应用程序的核心组成部分之一，用于封装业务逻辑、数据访问、服务等功能。</p><h3 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h3><ul><li>默认情况下，Spring项目启动时，会自动把Bean都创建好放在ioc容器中，如果想主动获取Bean，可以通过以下方法：<ul><li>根据name获取：Object getBean（String name）</li><li>根据类型获取：<T> getBean (Class<T> requiredType)</li><li>根据name获取（带类型转换）：<T> T getBean(String name,Class<T> requiredType)</li></ul></li></ul><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>Spring支持五种作用域，后三种再Web环境中才生效：</p><ul><li>单例（singleton）：<ul><li>默认作用域，整个应用程序中只有一个实例。</li><li>适合无状态的 Bean。</li></ul></li><li>原型（prototype）：<ul><li>每次请求都会创建一个新的实例。</li><li>适合有状态的 Bean。</li></ul></li><li>请求（request）：<br>  在 Web 应用程序中，每个 HTTP 请求都会创建一个新的实例。</li><li>会话（session）：<br>  在 Web 应用程序中，每个 HTTP 会话都会创建一个新的实例。</li><li>应用（application）：<br>  在 Portlet 应用程序中，每个 Portlet 应用程序都会创建一个新的实例。</li></ul><p>可以通过添加@Scope注解来配置作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">doLogin</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延迟初始化：加注解@Lazy，会延迟初始化Bean，直到第一次使用时才初始化</p><h3 id="第三方Bean"><a href="#第三方Bean" class="headerlink" title="第三方Bean"></a>第三方Bean</h3><ul><li><p>如果要管理的Bean对象来自第三方（不是自定义的），是无法使用@Component等注解来声明Bean的，需要用@Bean注解</p></li><li><p>管理第三方Bean对象，建议对这些Bean集中管理，可以通过@Configuration注解声明一个配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThirdPartyService <span class="title function_">thirdPartyService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThirdPartyService</span>();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>Springboot的自动配置就是当Spring容器启动后，一些配置类、Bean对象就自动存入到ioc容器中，省去了手动声明</p><p>当运行一个 Spring Boot 应用程序时，自动配置的过程大致如下：</p><ul><li>加载依赖：<br>  Maven 或 Gradle 根据项目的 pom.xml 或 build.gradle 文件加载所需的依赖项。</li><li>检测依赖：<br>  Spring Boot 自动配置机制会检测项目中存在哪些依赖项（如数据库驱动、Web 框架等）。</li><li>应用条件注解：<br>  自动配置类上的条件注解会根据检测到的依赖项和其他条件来决定是否应用某个配置。例如，@ConditionalOnClass 注解会检查某个类是否存在于类路径中，@ConditionalOnMissingBean 注解会检查是否没有定义某个 Bean。</li><li>创建和配置 Bean：<br>  如果条件满足，自动配置类会创建并配置相应的 Bean，这些 Bean 将被注册到 Spring 容器中。</li><li>启动应用程序：<br>  最后，Spring Boot 启动应用程序，加载所有自动配置的 Bean，并运行应用程序。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>Springboot启动类有注解@SpringBootApplication，该注解由三个部分组成：<ul><li>@SpringBootConfiguration：声明当前类是一个配置类</li><li>@ComponentScan：组件扫描，默认扫描当前启动类所在包及其子包</li><li>@EnableAutoConfiguration：Springboot实现自动配置的核心注解：<ul><li>该注解中封装了一个@Import注解，导入了一个接口AutoConfigurationImportSelector的实现类，该实现类实现了一个selectImports方法，方法返回值是一个数组，数组中是要导入ioc的类的全类名，方法中还加载了记录了要导入的配置类的文件</li><li>并非文件中全部类都会被注入ioc，有的是利用注解按条件装配的</li></ul></li></ul></li></ul><h2 id="条件装配"><a href="#条件装配" class="headerlink" title="条件装配"></a>条件装配</h2><ul><li>@Conditional：按照一定的条件进行判断，在满足条件后才会注册对应的Bean对象到ioc容器中，可以放在方法上或类上</li><li>@Conditional有大量子注解，常见的有：<ul><li>@ConditionalOnClass：判断环境中是否有对应类的字节码文件，有才注册Bean到ioc中<ul><li>通过name或Value属性指定类</li></ul></li><li>@ConditionalOnMissingBean：判断环境中没有对应的Bean（根据类型或名称），没有才注册Bean到ioc中<ul><li>指定类型用Value属性，指定名称用name属性</li></ul></li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，有才注册Bean到ioc中<ul><li>name属性指定属性，havingValue属性指定值</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h2&gt;&lt;p&gt;Spring Boot 是一个基于 Spring 框架的开源 Java 开发</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://cantutas.online/categories/JavaWeb/"/>
    
    
    <category term="Spring" scheme="https://cantutas.online/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringAOP</title>
    <link href="https://cantutas.online/2024/06/20/AOP/"/>
    <id>https://cantutas.online/2024/06/20/AOP/</id>
    <published>2024-06-20T07:06:37.000Z</published>
    <updated>2025-03-23T09:50:30.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程范式，它通过将横切关注点（cross-cutting concern）从业务逻辑中分离出来，从而提高代码的可维护性和可重用性。横切关注点是指那些在多个模块或类中都需要关注的通用功能，例如日志记录、性能监控、安全检查、事务管理等。</p><h3 id="AOP的核心概念"><a href="#AOP的核心概念" class="headerlink" title="AOP的核心概念"></a>AOP的核心概念</h3><ul><li>连接点（Join Point）：<br>  程序执行过程中的某个特定点，例如方法调用、异常抛出等。</li><li>切点（Pointcut）：<br>  定义了一组连接点，用于指定在哪些连接点上应用切面。</li><li>通知（Advice）：<br>  在切点处执行的代码块，用于实现横切关注点的逻辑。通知可以分为以下几种类型：<ul><li>前置通知（Before Advice）：在连接点之前执行。</li><li>后置通知（After Advice）：在连接点之后执行。</li><li>返回通知（After Returning Advice）：在连接点正常返回后执行。</li><li>异常通知（After Throwing Advice）：在连接点抛出异常时执行。</li><li>环绕通知（Around Advice）：在连接点之前和之后都执行。</li></ul></li><li>切面（Aspect）：<br>  将切点和通知组合在一起的模块，用于定义横切关注点的逻辑。</li><li>织入（Weaving）：<br>  将切面应用到目标对象的过程，可以发生在编译时、类加载时或运行时。</li></ul><h3 id="AOP的优势"><a href="#AOP的优势" class="headerlink" title="AOP的优势"></a>AOP的优势</h3><ul><li>代码复用：<br>  将横切关注点集中在一个地方实现，避免重复代码。</li><li>代码可维护性：<br>  修改横切关注点时，只需修改切面，无需修改多个模块。</li><li>代码简洁性：<br>  业务逻辑代码更加专注于核心功能，不被横切关注点干扰。</li></ul><h2 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h2><p>基于代理模式实现，适用于Spring框架中的应用。<br>使用SpringAOP，需要在pom.xml文件中导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    &lt;groupld.org/springframework.boot〈/groupld&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写AOP程序"><a href="#编写AOP程序" class="headerlink" title="编写AOP程序"></a>编写AOP程序</h3><p>在aop方法实现类前加上注解@Component和@Aspect<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 @Aspect 注解声明这是一个切面</span></span><br><span class="line"><span class="comment">// 使用 @Component 注解将切面注册为 Spring 容器中的一个 Bean</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个前置通知，在方法执行之前执行</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logging before method execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个后置通知，在方法执行之后执行</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logging after method execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ul><li>@Around: 环绕通知。该注解标注的通知方法在目标方法执行前、后都被执行</li><li>@Before：前置通知。该注解标注的通知方法在目标方法执行之前被执行</li><li>@After：后置通知。该注解标注的通知方法在目标方法执行后被执行，且无论是否有异常都会执行</li><li>@AfterReturning：返回后通知。该注解标注的通知方法在目标方法执行后被执行，但是目标方法有异常时不会执行</li><li>@AfterThrowing：异常后通知。该注解标注的通知方法在发生异常后执行</li></ul><h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><ul><li>当多个切面类的切入点都匹配到了目标方法时，多个通知方法的执行顺序<ul><li>不同切面类中，默认按照切面类的类名字母顺序排序：<ul><li>目标方法执行前的通知方法：字母排名靠前的先执行</li><li>目标方法执行后的通知方法：字母排名靠后的先执行</li></ul></li><li>在切面类上加注解@Order（数字）可以控制顺序<ul><li>目标方法执行前的通知方法：数字小的先执行</li><li>目标方法执行后的通知方法：数字大的先执行</li></ul></li></ul></li></ul><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ul><li>描述切入点方法的一种表达式，主要用来决定项目中哪些方法需要加入通知<ul><li>形式：<ul><li>execution(……):根据方法的返回值、包名、类名、方法名、方法参数等来匹配<ul><li>语法：execution(【访问修饰符】 返回值  【包名.类名】.方法名(方法参数)【 throws 异常】)</li><li>注：带【】的可以省略</li><li>异常是方法上声明抛出的异常，不是实际抛出的异常</li><li>通配符：<ul><li>*：单个独立的任意符号，可以匹配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名字中的一部分</li><li>.. ：多个连续的任意符号，可以通配任意层级的包、或任意类型、任意个数的参数</li></ul></li><li>可以用||、&amp;&amp;、！来组合不同的切入点表达式</li></ul></li><li>@annotation(……)：用于匹配标识有特定注解的方法<ul><li>用法：自定义一个注解，在定义时加上@Retention()指定注解生效时间，和@Target()指定注解作用范围；在要通知的方法前加上自定义的注解，然后在@PointCut()中使用注解@annotation（自定义的注解的全类名）</li></ul></li></ul></li></ul></li></ul><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><ul><li>Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等</li><li>@Around通知，获取连接点信息只能用ProceedingJoinPoint</li><li>其他四种通知类型，获取连接点信息只能用JoinPoint（ProceedingJoinPoint的父类型）</li></ul><h3 id="完整的SpringAOP实例"><a href="#完整的SpringAOP实例" class="headerlink" title="完整的SpringAOP实例"></a>完整的SpringAOP实例</h3><p>1、目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding a new user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明该类是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将切面类注册为 Spring 容器中的一个 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义切点，匹配 com.example.service 包中所有类的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceMethods</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logging before method execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//有了这个注解才能支持@Aspect等相关的一系列AOP注解的功能</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAOP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        userService.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h2&gt;&lt;p&gt;AOP（Aspect-Oriented Programming，面向切面编程）是一种编程范式，它通过将横切关注点（cross-cut</summary>
      
    
    
    
    <category term="Spring" scheme="https://cantutas.online/categories/Spring/"/>
    
    
    <category term="SpringAOP" scheme="https://cantutas.online/tags/SpringAOP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记</title>
    <link href="https://cantutas.online/2024/03/23/dataStructure/"/>
    <id>https://cantutas.online/2024/03/23/dataStructure/</id>
    <published>2024-03-23T05:44:16.000Z</published>
    <updated>2025-03-23T06:30:06.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表具有相同数据类型的n（≥0）个数据元素的有限序列。n&#x3D;0时是空表。线性表中每个结点至多有一个直接前驱，至多有一个直接后继。</p><h2 id="顺序实现"><a href="#顺序实现" class="headerlink" title="顺序实现"></a>顺序实现</h2><ul><li>定义：一种随机存取的存储结构</li><li>特点：<ul><li>随机访问，访问第i个元素的时间是O(1)</li><li>存储密度高</li><li>拓展容量不方便</li><li>插入、删除元素不便</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqList</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E[] elem; <span class="comment">// 存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> len;  <span class="comment">// 当前线性表的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITSIZE</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 默认初始容量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，初始化线性表</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeqList</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        maxSize = size;</span><br><span class="line">        elem = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[maxSize];</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造方法，使用默认初始容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeqList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(INITSIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断线性表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> len == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断线性表是否已满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> len == maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线性表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第 i 个位置的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= len) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + i + <span class="string">&quot;, Size: &quot;</span> + len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找值等于 e 的元素的索引，不存在返回 -1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem[i].equals(e)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 i 个位置插入元素 e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i, E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            expandCapacity();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; len) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + i + <span class="string">&quot;, Size: &quot;</span> + len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将第 i 位及以后的元素后移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len; j &gt; i; j--) &#123;</span><br><span class="line">            elem[j] = elem[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elem[i] = e;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第 i 个位置的元素，并返回其值</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= len) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + i + <span class="string">&quot;, Size: &quot;</span> + len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">removedElement</span> <span class="operator">=</span> elem[i];</span><br><span class="line">        <span class="comment">// 将第 i+1 位及以后的元素前移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            elem[j] = elem[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">return</span> removedElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空线性表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩容数组</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expandCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> maxSize * <span class="number">2</span>;</span><br><span class="line">        elem = Arrays.copyOf(elem, newCapacity);</span><br><span class="line">        maxSize = newCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印线性表内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;SeqList: [&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            System.out.print(elem[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        T data; <span class="comment">// 数据域</span></span><br><span class="line">        Node* next; <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造方法</span></span><br><span class="line">        <span class="built_in">Node</span>(T data, Node* next) : <span class="built_in">data</span>(data), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">        <span class="built_in">Node</span>(T data) : <span class="built_in">data</span>(data), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">Node</span>() : <span class="built_in">data</span>(), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node* head; <span class="comment">// 头节点</span></span><br><span class="line">    <span class="type">int</span> size; <span class="comment">// 链表的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="built_in">SinglyLinkedList</span>() : <span class="built_in">head</span>(<span class="literal">nullptr</span>), <span class="built_in">size</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构方法，释放链表内存</span></span><br><span class="line">    ~<span class="built_in">SinglyLinkedList</span>() &#123;</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取链表的长度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第 i 个位置的元素</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Index out of range&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node* current = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找值等于 e 的元素的索引，不存在返回 -1</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> T&amp; e)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Node* current = head;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;data == e) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            ++index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 i 个位置插入元素 e</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">const</span> T&amp; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Index out of range&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="built_in">Node</span>(e, head); <span class="comment">// 插入到头部</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node* current = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                current = current-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            current-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>(e, current-&gt;next); <span class="comment">// 插入到中间或尾部</span></span><br><span class="line">        &#125;</span><br><span class="line">        ++size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表末尾添加元素 e</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> T&amp; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="built_in">Node</span>(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node* current = head;</span><br><span class="line">            <span class="keyword">while</span> (current-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                current = current-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            current-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        ++size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第 i 个位置的元素，并返回其值</span></span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Index out of range&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node* toDelete;</span><br><span class="line">        T removedElement;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            toDelete = head;</span><br><span class="line">            removedElement = head-&gt;data;</span><br><span class="line">            head = head-&gt;next; <span class="comment">// 删除头部节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node* current = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                current = current-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            toDelete = current-&gt;next;</span><br><span class="line">            removedElement = toDelete-&gt;data;</span><br><span class="line">            current-&gt;next = toDelete-&gt;next; <span class="comment">// 删除中间或尾部节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        --size;</span><br><span class="line">        <span class="keyword">return</span> removedElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            Node* toDelete = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> toDelete;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表的排序"><a href="#链表的排序" class="headerlink" title="链表的排序"></a>链表的排序</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动 2 步，慢指针每次移动 1 步，当快指针到达链表末尾时，慢指针指向的链表节点即为链表的中点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">doSort</span>(head,null);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">doSort</span><span class="params">(ListNode head,ListNode tail)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==null)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不要漏掉</span></span><br><span class="line">        <span class="keyword">if</span>(head.next==tail)&#123;</span><br><span class="line">            head.next=null;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode fast=head,slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=tail&amp;&amp;fast.next!=tail)&#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode left=<span class="built_in">doSort</span>(head,slow);</span><br><span class="line">        ListNode right=<span class="built_in">doSort</span>(slow,tail);</span><br><span class="line">        ListNode dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode tmp=dummy;</span><br><span class="line">        <span class="keyword">while</span>(left!=null&amp;&amp;right!=null)&#123;</span><br><span class="line">            <span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(left.val&lt;right.val)&#123;</span><br><span class="line">                val=left.val;</span><br><span class="line">                left=left.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                val=right.val;</span><br><span class="line">                right=right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode node=<span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">            tmp.next=node;</span><br><span class="line">            tmp=tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==null)&#123;</span><br><span class="line">            tmp.next=right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tmp.next=left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>找到链表中开始循环的节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ListNode fast=head,slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=null&amp;&amp;fast.next!=null)&#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                ListNode p=fast,q=head;</span><br><span class="line">                <span class="keyword">while</span>(p!=q)&#123;</span><br><span class="line">                    p=p.next;</span><br><span class="line">                    q=q.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* p=<span class="literal">NULL</span>;</span><br><span class="line">        ListNode* q=head;</span><br><span class="line">        <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* tmp=q-&gt;next;</span><br><span class="line">            q-&gt;next=p;</span><br><span class="line">            p=q;</span><br><span class="line">            q=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">empty</span>()||s[i]!=st.<span class="built_in">top</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">top</span>()==s[i])&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>可用于求当前元素坐标或右边第一个比这个元素大的或小的元素。栈里面的元素是递增或递减的。栈内存放元素下标，标记遍历过的元素</p><ul><li>递增栈：求第一个比他大的元素的位置</li><li>递减栈：求第一个比他小的元素的位置</li></ul><p>以递增栈为例，实现递增栈包含以下几个步骤：</p><ul><li>当前元素比栈顶元素大：<ul><li>记录结果，弹出栈顶元素，直到当前元素比栈顶元素小，再将当前元素下标入栈</li></ul></li><li>当前元素比栈顶元素小：<ul><li>将当前元素下标入栈</li></ul></li><li>当前元素和栈顶元素相同（注意如果是求大于等于，则这一步要记录结果）：<ul><li>将当前元素下标入栈<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; temperatures.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">        temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">        result[st.<span class="built_in">top</span>()] = i - st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        st.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;线性表具有相同数据类型的n（≥0）个数据元素的有限序列。n&amp;#x3D;0时是空表。线性表中每个结点至多有一个直接前驱，至多有一个直接</summary>
      
    
    
    
    <category term="学习" scheme="https://cantutas.online/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="https://cantutas.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
